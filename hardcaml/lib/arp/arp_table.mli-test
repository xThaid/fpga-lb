open Hardcaml

module I : sig
  type 'a t =
    { clock : 'a
    ; clear : 'a
    ; wr_data : 'a
    ; wr_enable : 'a
    ; rd_enable : 'a
    }
  [@@deriving sexp_of, hardcaml]
end

module O : sig
  type 'a t =
    { rd_data : 'a
    ; rd_valid : 'a
    ; full : 'a
    ; one_from_full : 'a
    }
  [@@deriving sexp_of, hardcaml]
end

val create : capacity:int -> Scope.t -> Signal.t I.t -> Signal.t O.t

val hierarchical
  :  ?instance:string
  -> capacity:int
  -> Scope.t
  -> Signal.t I.t
  -> Signal.t O.t
